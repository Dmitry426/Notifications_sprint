@startuml
!include <logos/django.puml>
!include <logos/postgresql.puml>
!include <logos/python.puml>
'!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Component.puml
!include <c4/C4_Component.puml>

title Notification Service

LAYOUT_LANDSCAPE()


actor Клиент as Client
actor Админ as Admin

Boundary(sources, "Other services "){
Container(ugc_ns, "Auth", "python")
Container(admin_ns, "Admin_films", "python")
Container(recommendation_service, "Recommendation_service", "python")
}

Boundary(notification, "Notification Service") {
    ContainerDb(rabbitmq_ns, "RabbitMQ", "RabbitMQ", "Очередь отчетных событий")
    Container(admin, "Fast_api admin", "панель админа на создание отложенных и кастомизируемых сообщений ")
    ContainerDb(postgresql_ns, "SQL",<$postgresql> "Non transactional notification storage" )
    ContainerDb(rabbit_event,"RabbitMQ","Очереди уведомлений")
    Container(notification_process_ns,"Notification handler Fast_api" , "Prepare notifications"){
    Component(transations_handler,'Pyton' , "обрабатывает трансакционные события и сразу отправляет")
    Component(data_enrich_api, 'Api' , "Обагащает не трасакциооные события")
    Component(templating,'Jinja', "темлайтит емейлы ")
    }
    Container(worker_em_ns, "Worker Email", "python")
    Container(worker_sms_ns, "Worker SMS", "python")




    recommendation_service <--> rabbitmq_ns
    admin_ns --> rabbitmq_ns
    ugc_ns --> rabbitmq_ns
    rabbitmq_ns --> notification_process_ns
    postgresql_ns <--> admin
    notification_process_ns --> rabbit_event
    notification_process_ns --> postgresql_ns
    admin --> rabbit_event
    rabbit_event --> worker_em_ns
    rabbit_event --> worker_sms_ns
    Admin --> admin

    worker_em_ns --> Client
    worker_sms_ns --> Client


}

@enduml
